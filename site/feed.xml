<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title></title>
	<link href="http://connyrehbein.com/feed.xml" rel="self" />
	<link href="http://connyrehbein.com/" />
	<id>http://connyrehbein.com/</id>
	<author>
		<name>Cornelia Rehbein</name>
	</author>
	<updated>2014-08-25T20:57:35+02:00</updated>

	<entry>
		<title type="text">Scheduling a Notification With Sound</title>
		<link href="http://connyrehbein.com/blog/2014/local-notifications/" />
		<id>http://connyrehbein.com/blog/2014/local-notifications/</id>
		<published>2014-02-22T00:00:00+01:00</published>
		<updated>2014-02-22T00:00:00+01:00</updated>
		<summary type="html">Trigger a UILocalNotification with a sound after the timer has reached zero.

</summary>
		<content type="html">&lt;p&gt;Trigger a UILocalNotification with a sound after the timer has reached zero.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/AlarmClock&quot;&gt;&lt;strong&gt;Use case and source in AlarmClock project on github&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;em&gt;countdown&lt;/em&gt; method usually just counts down the current timer interval, but as soon as 0 is reached, an alert or notifcation should be shown.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)countDown
{
    if (self.currentTimeInterval &amp;lt; 1) {
        [self.timer invalidate];
        [self countDownFinished];
    } else {
        self.currentTimeInterval--;
        dispatch_async(dispatch_get_main_queue(), ^(void) {
            [[self getTimerView] updateTimerWithTimeInterval:self.currentTimeInterval];
        });
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;em&gt;countDownFinished&lt;/em&gt; method checks the application state and either triggers a UIAlert or schedules a notification&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)countDownFinished
{
    if ([UIApplication sharedApplication].applicationState == UIApplicationStateActive) {
        [self showCountDownFinishedAlert];
    } else {
        [self showCountDownFinishedNotification];
    }
    [[self getControlsView] reset];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the application is in the foreground, we will show an alert (playing a sound requries additional code).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)showCountDownFinishedAlert
{
    UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@&quot;Timer finished&quot;
                                                        message:@&quot;Dismiss to Close.&quot;
                                                       delegate:self
                                              cancelButtonTitle:@&quot;OK&quot;
                                              otherButtonTitles:nil];
    //[self playSound];
    [alertView show];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the app is in the background, I schedule a local notification using the UILocalNotification class with the system’s default sound, display a badge on the app icon and a message.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)showCountDownFinishedNotification
{
    UILocalNotification* localNotification = [[UILocalNotification alloc] init];
    localNotification.fireDate = [NSDate date];
    localNotification.soundName = UILocalNotificationDefaultSoundName;
    localNotification.applicationIconBadgeNumber = 1;
    localNotification.alertBody = @&quot;Timer finished&quot;;
    [[UIApplication sharedApplication]  scheduleLocalNotification:localNotification];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And Done.&lt;/p&gt;

&lt;h4 id=&quot;fin&quot;&gt;Fin&lt;/h4&gt;
</content>
	</entry>

	<entry>
		<title type="text">Timer Countdown in the Background</title>
		<link href="http://connyrehbein.com/blog/2014/continue-from-background/" />
		<id>http://connyrehbein.com/blog/2014/continue-from-background/</id>
		<published>2014-02-22T00:00:00+01:00</published>
		<updated>2014-02-22T00:00:00+01:00</updated>
		<summary type="html">Making a Timer app slowly countdown to zero even if the app enters the background.

</summary>
		<content type="html">&lt;p&gt;Making a Timer app slowly countdown to zero even if the app enters the background.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/AlarmClock&quot;&gt;&lt;strong&gt;Use case and source in AlarmClock project on github&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)scheduleCountDown
{
    self.backgroundTask = [[UIApplication sharedApplication] beginBackgroundTaskWithExpirationHandler:^{
        NSLog(@&quot;Background handler called. Not running background tasks anymore.&quot;);
        [[UIApplication sharedApplication] endBackgroundTask:self.backgroundTask];
        self.backgroundTask = UIBackgroundTaskInvalid;
                                                             }];
    self.isActive = YES;
    self.timer = [NSTimer timerWithTimeInterval:1.0
                                         target:self
                                       selector:@selector(countDown)
                                       userInfo:nil
                                        repeats:YES];
    NSRunLoop* runloop = [NSRunLoop currentRunLoop];
    [runloop addTimer:self.timer
              forMode:NSRunLoopCommonModes];
    [runloop addTimer:self.timer
              forMode:UITrackingRunLoopMode];
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The countdown function&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)countDown
{
    self.currentTimeInterval--;
    [self validateTimer];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We also check if zero is reached and update the timer view with the current time interval.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)validateTimer
{
    if (self.currentTimeInterval &amp;lt; 1) {
        [self.timer invalidate];
        [self countDownFinished];
    } else {
        if (UIApplication.sharedApplication.applicationState == UIApplicationStateActive) {
            [[self getTimerView] updateTimerWithTimeInterval:self.currentTimeInterval];
        }
        NSLog(@&quot;App is backgrounded, timer at %f&quot;, self.currentTimeInterval);
        NSLog(@&quot;Background time remaining = %.1f seconds&quot;, [UIApplication sharedApplication].backgroundTimeRemaining);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Open Questions/Problems&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;According to Apple’s guidelines, only apps with specific background tasks (play/record music, location updates,..) are allowed to run in the background for a longer period of time&lt;/li&gt;
  &lt;li&gt;Apps that don’t fit into those categories can run for some time in the background, until they are suspended and don’t execute any code anymore&lt;/li&gt;
  &lt;li&gt;This timer in this app continues counting down when the app enters the background, but when &lt;em&gt;[UIApplication sharedApplication].backgroundTimeRemaining&lt;/em&gt; reaches 0, the app is suspended and we cannot alert the user anymore.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Conny&lt;/p&gt;

</content>
	</entry>

	<entry>
		<title type="text">Playing a Sound with AVAudioPlayer</title>
		<link href="http://connyrehbein.com/blog/2014/playing-a-sound/" />
		<id>http://connyrehbein.com/blog/2014/playing-a-sound/</id>
		<published>2014-02-21T00:00:00+01:00</published>
		<updated>2014-02-21T00:00:00+01:00</updated>
		<summary type="html">How to use AVAudioPlayer and AVAudioSession to play a sound. I used this in my timer app prototype to play a sound when the timer reaches zero.

</summary>
		<content type="html">&lt;p&gt;How to use AVAudioPlayer and AVAudioSession to play a sound. I used this in my timer app prototype to play a sound when the timer reaches zero.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/AlarmClock&quot;&gt;&lt;strong&gt;Use case and source in AlarmClock project on github&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I first imported the Audio &amp;amp; Video Framework and add a property for the audio player&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;AVFoundation/AVFoundation.h&amp;gt;
@interface CRTimerViewController : UIViewController &amp;lt;UIAlertViewDelegate&amp;gt;
@property(nonatomic, strong) AVAudioPlayer* audioPlayer;
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sound file I want to play can added to the project via drag and drop or addFileToProject.&lt;/p&gt;

&lt;p&gt;I want to play the sound when the timer is finished and an alert view is shown.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)showCountDownFinishedAlert
{
    UIAlertView* alertView = [[UIAlertView alloc] initWithTitle:@&quot;Timer finished&quot;
                                                        message:@&quot;Dismiss to Close.&quot;
                                                       delegate:self
                                              cancelButtonTitle:@&quot;OK&quot;
                                              otherButtonTitles:nil];
    [self playSound];
    [alertView show];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To play the sound:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)playSound
{
    NSError* audioSessionError = nil;
    AVAudioSession* audioSession = [AVAudioSession sharedInstance];
    if ([audioSession setCategory:AVAudioSessionCategoryPlayback
                            error:&amp;amp;audioSessionError]) {
        NSLog(@&quot;Successfully set the audio session.&quot;);
    } else {
        NSLog(@&quot;Could not set the audio session&quot;);
    }
    dispatch_queue_t dispatchQueue = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0);
    dispatch_async(dispatchQueue, ^(void) {
        NSBundle *mainBundle = [NSBundle mainBundle];
        NSString *filePath = [mainBundle pathForResource:@&quot;Annoying_Alarm_Clock-UncleKornicob&quot;
                                                  ofType:@&quot;mp3&quot;];
        NSData *fileData = [NSData dataWithContentsOfFile:filePath];
        NSError *audioPlayerError = nil;

        self.audioPlayer = [[AVAudioPlayer alloc]
                            initWithData:fileData
                            error:&amp;amp;audioPlayerError];

        if (self.audioPlayer != nil){
            if ([self.audioPlayer prepareToPlay] &amp;amp;&amp;amp; [self.audioPlayer play]){
                NSLog(@&quot;Successfully started playing.&quot;);
            }else{
                NSLog(@&quot;Failed to play the audio file.&quot;); self.audioPlayer = nil;
            }
        }else{
            NSLog(@&quot;Could not instantiate the audio player.&quot;);
        }
    });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;First, I get a reference to the AudioSession Singleton and set the audio session category that is needed (Ambient, Playback, Record and more).&lt;/p&gt;

&lt;p&gt;After that, I dispatch an asynchronous process that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loads the audio file resource&lt;/li&gt;
  &lt;li&gt;Creates the audio player&lt;/li&gt;
  &lt;li&gt;Plays the audio sound&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In caes you want to handle interruptions and other audio player events, you will have to implement the AVAudioPlayerDelegate protocoll and set the audioplayer delegate to your view controller.&lt;/p&gt;

&lt;p&gt;To stop the audio, I used the UIAlertView delegate methods to get notified when alertview gets dismissed and the sound can stop.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)alertView:(UIAlertView*)alertView didDismissWithButtonIndex:(NSInteger)buttonIndex
{
    [self.audioPlayer stop];
    [[self getTimerView] stopTimer];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the final result (be happy you cannot hear the annoying sound ..)&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;class&quot; src=&quot;/images/assets/2014-02-21-timer-alert.png&quot; title=&quot;screen shot&quot; alt=&quot;timer with alert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Conny&lt;/p&gt;

</content>
	</entry>

	<entry>
		<title type="text">Timer</title>
		<link href="http://connyrehbein.com/project/2014/timer/" />
		<id>http://connyrehbein.com/project/2014/timer/</id>
		<published>2014-02-14T00:00:00+01:00</published>
		<updated>2014-02-14T00:00:00+01:00</updated>
		<summary type="html">Description


Countdown timer and stopwatch similar to apple&#39;s included clock app.
    
        Timer uses the UIDatePicker to set up the alarm time and counts down until it reaches zero. It also continues counting (for some time) when the app enters the background and uses a UILocalNotification to alert the user when the time has run out and plays a sound.
        
    Stopwatch can recored lap times, and the usual play, pause, resume and reset functionalities. It also continues running for some time, after the app enters the background.


Source Code


 View the code on GitHub  


Screenshots



    
        Timer configuration screen:
            
        
        Timer in action:
            
        
    

    
        Stopwatch start screen:
            
        
        Stopwatch in action with recorded laps:
            
        
    


Video



    
        
            
                    Your browser does not support the video tag.
        
        
    



</summary>
		<content type="html">&lt;h4&gt;Description&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;Countdown timer and stopwatch similar to apple&#39;s included clock app.
    &lt;br&gt;&lt;br&gt;
        &lt;b&gt;Timer&lt;/b&gt; uses the UIDatePicker to set up the alarm time and counts down until it reaches zero. It also continues counting (for some time) when the app enters the background and uses a UILocalNotification to alert the user when the time has run out and plays a sound.
        &lt;br&gt;
    &lt;b&gt;Stopwatch&lt;/b&gt; can recored lap times, and the usual play, pause, resume and reset functionalities. It also continues running for some time, after the app enters the background.
&lt;/p&gt;

&lt;h4&gt;Source Code&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/AlarmClock&quot;&gt;View the code on GitHub  &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;p&gt;

&lt;h4&gt;Screenshots&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 text-center&quot;&gt;Timer configuration screen:
            &lt;img class=&quot;center-block&quot; src=&quot;/images/assets/projects/timer/images/timer_0.png&quot; alt=&quot;timer screen with picker to choose the amount of time we are setting it up for.&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 text-center&quot;&gt;Timer in action:
            &lt;img class=&quot;center-block&quot; src=&quot;/images/assets/projects/timer/images/timer_1.png&quot; alt=&quot;timer screen while the counter is active&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 text-center&quot;&gt;Stopwatch start screen:
            &lt;img class=&quot;center-block&quot; src=&quot;/images/assets/projects/timer/images/stopwatch_0.png&quot; alt=&quot;stopwatch starting screen&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 text-center&quot;&gt;Stopwatch in action with recorded laps:
            &lt;img class=&quot;center-block&quot; src=&quot;/images/assets/projects/timer/images/stopwatch_1.png&quot; alt=&quot;Stopwatch is counting up and has two recorded laps in the tableview&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/p&gt;

&lt;h4&gt;Video&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;div&gt;
        &lt;video id=&quot;vid&quot; onclick=&quot;playPause()&quot; width=&quot;50%&quot; controls class=&quot;center-block&quot;&gt;
            &lt;source src=&quot;/images/assets/projects/timer/videos/timer_stopwatch_video.mp4&quot; type=&quot;video/mp4&quot;&gt;
                    Your browser does not support the video tag.
        &lt;/video&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            var myVideo = document.getElementById(&quot;vid&quot;);

            function playPause() {
                if (myVideo.paused)
                    myVideo.play();
                else
                    myVideo.pause();
            }
        &lt;/script&gt;
    &lt;/div&gt;
&lt;/p&gt;
</content>
	</entry>

	<entry>
		<title type="text">Simple Fractions Part 2</title>
		<link href="http://connyrehbein.com/blog/2014/fractions-simple-part-2/" />
		<id>http://connyrehbein.com/blog/2014/fractions-simple-part-2/</id>
		<published>2014-02-13T00:00:00+01:00</published>
		<updated>2014-02-13T00:00:00+01:00</updated>
		<summary type="html">This time we will extend our existing prototype from Part 1 with more advanced functionalities.
The source code is available on github.

Todo


  Decimal value of a fraction
  Create fraction from a decimal value
  Greatest Common Divisor (gcd) with euclidial algorithm
  Simplify Fractions


We will also implement the necessary user interface to interact with our fractions.


  Storyboard skeleton
  Linking buttons to methods
  Parsing input to create fractions
  Show results


</summary>
		<content type="html">&lt;p&gt;This time we will extend our existing prototype from Part 1 with more advanced functionalities.
The source code is available on &lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/Fractions&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;todo&quot;&gt;Todo&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Decimal value of a fraction&lt;/li&gt;
  &lt;li&gt;Create fraction from a decimal value&lt;/li&gt;
  &lt;li&gt;Greatest Common Divisor (gcd) with euclidial algorithm&lt;/li&gt;
  &lt;li&gt;Simplify Fractions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will also implement the necessary user interface to interact with our fractions.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storyboard skeleton&lt;/li&gt;
  &lt;li&gt;Linking buttons to methods&lt;/li&gt;
  &lt;li&gt;Parsing input to create fractions&lt;/li&gt;
  &lt;li&gt;Show results&lt;/li&gt;
&lt;/ul&gt;

&lt;!-- more --&gt;
&lt;p&gt;###Extending the Logic&lt;/p&gt;

&lt;p&gt;First, let’s create a method, that returns the decimal value of a fraction.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (double)decimalValue
{
    double value = (double)self.numerator / self.denominator;
    return value;
} We can use this to display the fraction to the user in an alternate format. Another useful functionality would be to create the fraction out of a decimal number, like 0.345. To do this, we declare another init method that takes a decimal as parameter and creates a fraction object out of it.

- initWithDecimal:(double)decimalValue
{
    self = [super init];
    if (self) {
        [self setToDecimalValue:decimalValue];
    }
    return self;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To create a fraction out of decimal, we normally write the whole decimal as integer into the numerator and set the denominator to 1, followed by as many zeroes as there are digits to the right of the decimal point of the decimal.&lt;/p&gt;

&lt;p&gt;Now, with floating point variables it can be difficult to determine the amount of numbers following the decimal point.
&amp;gt; See &lt;a href=&quot;http://en.wikipedia.org/wiki/Floating_point#Accuracy_problems&quot;&gt;Accuracy problems&lt;/a&gt;.
&amp;gt; Stackoverflow also has an interesting discussion on this challenge &lt;a href=&quot;http://stackoverflow.com/questions/95727/how-to-convert-floats-to-human-readable-fractions&quot;&gt;Here&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;http://docs.oracle.com/cd/E19957-01/806-3568/ncg_goldberg.html&quot;&gt;What Every Computer Scientist Should Know About Floating-Point Arithmetic&lt;/a&gt; is also very informative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To go around this, I convert the given decimal to a large number. First I set the  denominator to 1.000.000 and then multiply it with the decimal to get the numerator. After that we can simplify it with the gcd (that we now need to calculate). This solution has a limited precicion, but feel free to optimize it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)setToDecimalValue:(double)decimal;
{
    self.numerator = floor(decimal * 1000000);
    self.denominator = 1000000;
    [self simplify];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To simplify a fraction we find the the greatest common divisor(gcd) and divide both the nominator and the denominator by it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)simplify
{
    NSInteger gcd = [self greatestCommonDividerForNumber:self.numerator
                                              withNumber:self.denominator];
    self.numerator /= gcd;
    self.denominator /= gcd;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can choose from different methods to find the gcd &lt;a href=&quot;http://en.wikipedia.org/wiki/Greatest_common_divisor&quot;&gt;more info here&lt;/a&gt;. I decided to use &lt;strong&gt;euclids algorithm&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (NSInteger)greatestCommonDividerForNumber:(NSInteger)num1 withNumber:(NSInteger)num2
{
	// euclids algorithm
    while (num2 != 0) {
        NSInteger remainder = num1 % num2;
        num1 = num2;
        num2 = remainder;
    }
    return num1;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So much for the logic part. Now we will create a user interface to actually try it out.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-ui&quot;&gt;Creating the UI&lt;/h3&gt;

&lt;p&gt;First, I created a new UIViewController subclass, called CRFractionViewController.
After that I added a new Storyboad to my project, and equipped it with a generic ViewController that is set to our custom class CRFractionViewController and added a number of controls that can be seen in the following picture:&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;class&quot; src=&quot;/images/assets/2014-02-12-fraction-2-0.png&quot; title=&quot;screen shot&quot; alt=&quot;image of the skeleton&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After I connected the labels outlets and the button actions to my view controller’s header, this is what it looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &amp;lt;UIKit/UIKit.h&amp;gt;

@interface CRFractionViewController : UIViewController &amp;lt;UIAlertViewDelegate&amp;gt;

@property(weak, nonatomic) IBOutlet UILabel* leftNumeratorLabel;
@property(weak, nonatomic) IBOutlet UILabel* leftDenominatorLabel;

@property(weak, nonatomic) IBOutlet UILabel* rightNumeratorLabel;
@property(weak, nonatomic) IBOutlet UILabel* rightDenominatorLabel;

@property(weak, nonatomic) IBOutlet UILabel* resultNumerator;
@property(weak, nonatomic) IBOutlet UILabel* resultDenominator;

- (IBAction)addFractions:(UIButton*)sender;
- (IBAction)subtractFractions:(UIButton*)sender;
- (IBAction)multiplyFractions:(UIButton*)sender;
- (IBAction)divideFractions:(UIButton*)sender;

- (IBAction)changeLeftFraction:(UIButton*)sender;
- (IBAction)changeRightFraction:(UIButton*)sender;

@end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;defining-ui-functionality&quot;&gt;Defining UI Functionality&lt;/h3&gt;

&lt;p&gt;We now need to import our Fraction model and set some initial values in the viewDidLoad. We also need two properties, frac1 and frac2, to save our fractions.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#import &quot;CRFractionViewController.h&quot;

#import &quot;CRFraction.h&quot;

@interface CRFractionViewController ()

@property(strong, nonatomic) CRFraction* frac1;
@property(strong, nonatomic) CRFraction* frac2;
@property(strong, nonatomic) CRFraction* editingFraction;

@end

@implementation CRFractionViewController

- (void)viewDidLoad
{
    [super viewDidLoad];

    self.frac1 = [[CRFraction alloc] initWithNumerator:1
                                       withDenominator:5];

    self.frac2 = [[CRFraction alloc] initWithNumerator:3
                                       withDenominator:5];

    self.resultDenominator.text = @&quot;&quot;;
    self.resultNumerator.text = @&quot;&quot;;

    [self updateFractionLabels];
    // Do any additional setup after loading the view.
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The updateFractionLabels method does nothing more, than resetting the text in our labels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)updateFractionLabels
{
    [self.frac1 normalize];
    self.leftNumeratorLabel.text = [NSNumber numberWithInt:self.frac1.numerator].stringValue;
    self.leftDenominatorLabel.text = [NSNumber numberWithInt:self.frac1.denominator].stringValue;

    [self.frac2 normalize];
    self.rightNumeratorLabel.text = [NSNumber numberWithInt:self.frac2.numerator].stringValue;
    self.rightDenominatorLabel.text = [NSNumber numberWithInt:self.frac2.denominator].stringValue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we link the four function buttons +,-,*,/ with our functions from CRFraction.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)addFractions:(UIButton*)sender
{
    CRFraction* result = [CRFraction fractionByAdding:self.frac1
                                                   to:self.frac2];
    [self updateResultWithFraction:result];
}

- (IBAction)subtractFractions:(id)sender
{
    CRFraction* result = [CRFraction fractionBySubtracting:self.frac2
                                                      from:self.frac1];
    [self updateResultWithFraction:result];
}

- (IBAction)multiplyFractions:(id)sender
{
    CRFraction* result = [CRFraction fractionByMultiplying:self.frac1
                                                      with:self.frac2];
    [self updateResultWithFraction:result];
}

- (IBAction)divideFractions:(UIButton*)sender
{
    CRFraction* result = [CRFraction fractionByDividing:self.frac1
                                                     by:self.frac2];
    [self updateResultWithFraction:result];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And show the results to the user by updating the result labels.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)updateResultWithFraction:(CRFraction*)result
{
    self.resultNumerator.text = [NSNumber numberWithInt:result.numerator].stringValue;
    self.resultDenominator.text = [NSNumber numberWithInt:result.denominator].stringValue;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only thing left to do is to create an intup option for the user to enter new fractions.
In the original layout I added two system buttons with a + sign. If those are pressed, we present an input to the user to enter a new fraction. We also need to remember which fraction we are editing.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (IBAction)changeLeftFraction:(id)sender
{
    self.editingFraction = self.frac1;
    [self showFractionInput];
}

- (IBAction)changeRightFraction:(UIButton*)sender
{
    self.editingFraction = self.frac2;
    [self showFractionInput];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For the input I’ve choosen UIAlertView with a text input. Our ViewController also implements the UIAlertViewDelegate protocol in the header, so that we can handle notifications. The UIAlertView will present a message dialog into which a number is entered, using a number-based keyboard. As input, we either accept decimals( 1.463 ) or fractions( 3/4 ).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)showFractionInput
{
    UIAlertView* inputDialog = [[UIAlertView alloc] initWithTitle:@&quot;Please enter your fraction&quot;
                                                          message:@&quot;You can enter two integers with a slash: 1/4 . Or you can enter a decimal number: 2.75 &quot;
                                                         delegate:self
                                                cancelButtonTitle:@&quot;Cancel&quot;
                                                otherButtonTitles:@&quot;OK&quot;, nil];

    [inputDialog setAlertViewStyle:UIAlertViewStylePlainTextInput];

    UITextField* textField = [inputDialog textFieldAtIndex:0];
    textField.keyboardType = UIKeyboardTypeNumbersAndPunctuation;

    [inputDialog show];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To access the user input, we implement one of the alertview delegate methods, so that we are notified when the user input is finished.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#pragma mark UIAlertView delegate methods
- (void)alertView:(UIAlertView*)alertView
    clickedButtonAtIndex:(NSInteger)buttonIndex
{
    if (buttonIndex == 0) // cancel
    {
        return;
    } else {
        [self parseFractionInput:[alertView textFieldAtIndex:0].text];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the parsing method, we test if our expected formats are matched and set our respective fraction values. I we cannot parse the input an alert is raised.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;- (void)parseFractionInput:(NSString*)inputText
{
    NSArray* components = [inputText componentsSeparatedByString:@&quot;/&quot;];
    if (components.count == 2) {
        self.editingFraction.numerator = ((NSString*)components[0]).integerValue;
        self.editingFraction.denominator = ((NSString*)components[1]).integerValue;
        [self updateFractionLabels];
    } else if (inputText.doubleValue) {
        [self.editingFraction setToDecimalValue:inputText.doubleValue];
        [self updateFractionLabels];
    } else {
        [self showParsingAlertWithText:inputText];
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, if not already implemented, we add our viewcontroller to the window in the AppDelegate&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[self.window makeKeyAndVisible];

self.window.rootViewController = [[UIStoryboard storyboardWithName:@&quot;Storyboard&quot;
                                                            bundle:nil] instantiateInitialViewController];
return YES;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we’re done!
If you run the app now, you can edit the fractions.&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;class&quot; src=&quot;/images/assets/2014-02-12-fraction-2-1.png&quot; title=&quot;screen shot&quot; alt=&quot;image of the final app&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And also use add, multiply, etc., and see the result!&lt;/p&gt;

&lt;p&gt;&lt;img class=&quot;class&quot; src=&quot;/images/assets/2014-02-12-fraction-2-2.png&quot; title=&quot;screen shot&quot; alt=&quot;image of the final app&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;personal-conclusion-blogging-this-was-an-interesting-experiment-but-writing-all-of-this-takes-quite-a-lot-of-time-even-more-than-the-implementation-actually-for-the-next-few-projects-i-will-try-to-keep-it-short-and-summarize-the-challenges-and-learnings-instead-the-code-is-after-all-available-on-github-for-reverse-engineering-&quot;&gt;Personal Conclusion: Blogging this was an interesting experiment. But writing all of this takes quite a lot of time. Even more than the implementation, actually. For the next few projects I will try to keep it short and summarize the challenges and learnings instead. The code is after all available on github for reverse engineering ;)&lt;/h4&gt;

&lt;p&gt;‘til text time&lt;/p&gt;

&lt;p&gt;- Conny&lt;/p&gt;
</content>
	</entry>

	<entry>
		<title type="text">Fractions</title>
		<link href="http://connyrehbein.com/project/2014/fractions/" />
		<id>http://connyrehbein.com/project/2014/fractions/</id>
		<published>2014-02-13T00:00:00+01:00</published>
		<updated>2014-02-13T00:00:00+01:00</updated>
		<summary type="html">Description


A fractions calculator programmed in Objective-C with the iOS 7 framework.
    
    Functionalities: Converting between decimal and fraction representation, GCD(euclid&#39;s greatest common divisor), simplifying, general operations between fractions (+,-,*,/)


Source Code


 View the code on GitHub 


Screenshots



    
        The main screen with all operators and operands:
            
        
        Changing the values:
            
        
    


Video



    
        
            
                    Your browser does not support the video tag.
        
        
    




</summary>
		<content type="html">&lt;h4&gt;Description&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;A fractions calculator programmed in Objective-C with the iOS 7 framework.
    &lt;br&gt;
    Functionalities: Converting between decimal and fraction representation, GCD(euclid&#39;s greatest common divisor), simplifying, general operations between fractions (+,-,*,/)
&lt;/p&gt;

&lt;h4&gt;Source Code&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;
 &lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/Fractions&quot;&gt;View the code on GitHub &lt;i class=&quot;fa fa-github&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;p&gt;

&lt;h4&gt;Screenshots&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 text-center&quot;&gt;The main screen with all operators and operands:
            &lt;img class=&quot;center-block&quot; src=&quot;/images/assets/projects/fractions/images/fraction_0.png&quot; alt=&quot;fraction image for the start screen with the fractions and the operations&quot;&gt;
        &lt;/div&gt;
        &lt;div class=&quot;col-xs-12 col-sm-6 text-center&quot;&gt;Changing the values:
            &lt;img class=&quot;center-block&quot; src=&quot;/images/assets/projects/fractions/images/fraction_1.png&quot; alt=&quot;fraction image for the start screen with the fractions and the operations&quot;&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/p&gt;

&lt;h4&gt;Video&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;div&gt;
        &lt;video id=&quot;vid&quot; onclick=&quot;playPause()&quot; width=&quot;50%&quot; controls class=&quot;center-block&quot;&gt;
            &lt;source src=&quot;/images/assets/projects/fractions/videos/fraction_video.mp4&quot; type=&quot;video/mp4&quot;&gt;
                    Your browser does not support the video tag.
        &lt;/video&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            var myVideo = document.getElementById(&quot;vid&quot;);

            function playPause() {
                if (myVideo.paused)
                    myVideo.play();
                else
                    myVideo.pause();
            }
        &lt;/script&gt;
    &lt;/div&gt;
&lt;/p&gt;

</content>
	</entry>

	<entry>
		<title type="text">Simple Fractions Part 1</title>
		<link href="http://connyrehbein.com/blog/2014/fractions-simple/" />
		<id>http://connyrehbein.com/blog/2014/fractions-simple/</id>
		<published>2014-02-12T00:00:00+01:00</published>
		<updated>2014-02-12T00:00:00+01:00</updated>
		<summary type="html">Let’s create a program that handles calculations with fractions. We want allow additon, subtraction, multiplication, and division of the fractions.

</summary>
		<content type="html">&lt;p&gt;Let’s create a program that handles calculations with fractions. We want allow additon, subtraction, multiplication, and division of the fractions.
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;Later, we might display the fractions as percents and decimals. Or as mixed numbers. Or just do something fancy with it.&lt;/p&gt;

&lt;p&gt;The source code is available on &lt;a href=&quot;https://github.com/connyr/ios-projects/tree/master/Numbers/Fractions&quot;&gt;github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;analyse-the-tasks&quot;&gt;Analyse the Tasks&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Fractions&lt;/strong&gt; are usually displayed with a &lt;strong&gt;numerator&lt;/strong&gt; on top, a dividing slash, and a non-zero &lt;strong&gt;denominator&lt;/strong&gt; at the bottom. Check &lt;a href=&quot;http://en.wikipedia.org/wiki/Fraction_(mathematics)&quot;&gt;Wikipedia&lt;/a&gt; for more info.&lt;/p&gt;

&lt;p&gt;Model/Logic&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Datastructure/Class for &lt;strong&gt;Fraction&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Addition: Adds two fractions numerators. If the denominators don’t match we have to find the a common denominator, before we can sum up the numerators.&lt;/li&gt;
  &lt;li&gt;Subtraction: Same as Addition, but subtracting the numerators instead.&lt;/li&gt;
  &lt;li&gt;Multiplication: Multiply the numerators and multiply the denumerators.&lt;/li&gt;
  &lt;li&gt;Division: Divide first fraction by multiplying it with the reciprocal of the second fraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;User should be able to&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Change the fraction’s numerators and denumerators&lt;/li&gt;
  &lt;li&gt;Choose the operation (+,-,*,/)&lt;/li&gt;
  &lt;li&gt;View the result&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So much for the basics.&lt;/p&gt;

&lt;p&gt;First, create a new class, called for example CRFraction, a subclass of NSObject, as our data model. The header file should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CRFraction&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// number above the slash&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;@property&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nonatomic&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//number below the slash&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;addFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;subtractFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;multiplyWithFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;divideWithFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fractionByAdding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fractionBySubtracting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fractionByMultiplying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;fractionByDividing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;(The leading CR in the classname is just my personal class prefix). I defined two properties, &lt;strong&gt;numerator ** and **denominator&lt;/strong&gt; which will hold the values of the fraction. I also defined some instance and class methods that we will fill soon.&lt;/p&gt;

&lt;p&gt;With this, we can later add two fractions, ** a ** and ** b ** , either by calling&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;addFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or by using the class method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionByAdding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the first case, the actual values of ** a ** are changed and returned. In the second example, ** a ** and ** b ** are not changed and we receive a new CRFraction object as a result.&lt;/p&gt;

&lt;p&gt;Now, let’s fill in the actual logic.&lt;/p&gt;

&lt;h3 id=&quot;the-logic&quot;&gt;The Logic&lt;/h3&gt;

&lt;h4 id=&quot;addition&quot;&gt;Addition&lt;/h4&gt;
&lt;p&gt;If both fractions share the same denominators, we only need to add the numerators to each other. Otherwise we have to find a common denominator for both fractions.
To find the common denominator we will for now use the simple, but not optimized &lt;a href=&quot;http://en.wikipedia.org/wiki/Fraction_(mathematics)#Adding_unlike_quantities&quot;&gt;cross-product method&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fractionByAdding:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op1&lt;/span&gt;
	                             &lt;span class=&quot;nf&quot;&gt;to:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op2&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;c1&quot;&gt;// Find a common denominator with the crossproduct&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For the instance method, we can make use of the class method by using the instance as a parameter.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;addFraction:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anotherFraction&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionByAdding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;
	                                                   &lt;span class=&quot;nl&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;copyValuesFromFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First, we call the class method with the parameter and our instance. The we copy the values with in the result to our current instance in the ** copyValuesFromFraction: ** method.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copyValuesFromFraction:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;subtraction&quot;&gt;Subtraction&lt;/h4&gt;

&lt;p&gt;Subtraction works similar to Addition. But what if the operation has a negative result? We should normalize negative values in our fractions after the operations before the returns.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fractionBySubtracting:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op2&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;c1&quot;&gt;// Find a common denominator with the crossproduct&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	        &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;subtractFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionBySubtracting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;
	                                                      &lt;span class=&quot;nl&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;copyValuesFromFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The subtraction now looks nearly identical to the previous method, except for minus the operator.
 &amp;gt; Note: I see parts, where we could optimize this method already, e.g., sending the operator as a parameter so that both addition and subtraction could be handled by the same method… But, I want to avoid premature optimization for now.&lt;/p&gt;

&lt;p&gt;I also defined a new method, normalize, that will take care of negative fractions. If both parts are negative, then we can normalize it to a positive fraction. Also, If only the denominator is negative, if want to switch signs, so that the numerator is negative instead.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;normalize&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s actually enough, if we only check for a negative denominator.&lt;/p&gt;

&lt;h4 id=&quot;multiplication&quot;&gt;Multiplication&lt;/h4&gt;

&lt;p&gt;Multiplication multiplies each of the numerators and denominators.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fractionByMultiplying:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;with:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op2&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;multiplyWithFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionByMultiplying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
	                                                      &lt;span class=&quot;nl&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;copyValuesFromFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;division&quot;&gt;Division&lt;/h4&gt;

&lt;p&gt;Division between fractions is solved using one fractions reciprocal(reverse) and multiply the fractions.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;fractionByDividing:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op1&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;by:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;op2&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;c1&quot;&gt;// reciprocal or reverse fraction&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithNumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;
	                                             &lt;span class=&quot;nl&quot;&gt;withDenominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionByMultiplying&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;op1&lt;/span&gt;
	                                                      &lt;span class=&quot;nl&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;divideWithFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionByDividing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
	                                                     &lt;span class=&quot;nl&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anotherFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;copyValuesFromFraction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;h4 id=&quot;showtime&quot;&gt;Showtime&lt;/h4&gt;

&lt;p&gt;To test this out, we can now create some fractions and change their values. First of, let’s add a convenient initializer function for our fractions&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initWithNumerator:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withDenominator:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;denom&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;denom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;p&gt;Now, we can test it out in the application:didFinishLaunchingWithOptions:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;window&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makeKeyAndVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fracA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithNumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                                              &lt;span class=&quot;nl&quot;&gt;withDenominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1/4&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fracB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;initWithNumerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
                                              &lt;span class=&quot;nl&quot;&gt;withDenominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1/3&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CRFraction&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;fractionByAdding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frac1&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;frac2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot; 1/4 - 1/3 = %i/%i&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;denominator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;}&lt;/p&gt;

&lt;blockquote&gt;
  &lt;blockquote&gt;
    &lt;p&gt;1/4 + 1/3 = 7/12&lt;/p&gt;
  &lt;/blockquote&gt;
&lt;/blockquote&gt;

&lt;p&gt;Go ahead and try out all of the functions, if you like.&lt;/p&gt;

&lt;p&gt;In the next part I will extend the logic with decimals, mixed fractions, and gcd - the greatest common divider.&lt;/p&gt;

</content>
	</entry>

	<entry>
		<title type="text">Jewel Game</title>
		<link href="http://connyrehbein.com/project/2014/jewel-switching-game/" />
		<id>http://connyrehbein.com/project/2014/jewel-switching-game/</id>
		<published>2014-02-11T00:00:00+01:00</published>
		<updated>2014-02-11T00:00:00+01:00</updated>
		<summary type="html">Description



Implemented the Jewel Game described in &#39;HTML5 Games&#39; by Jacob Seidelin. Offers basic gameplay with scores, levels, animations and menu implemented in JS, HTML5 Canvas and CSS.


Live Game


 Try it out! (not optimized for mobile yet)


Screenshots



    Start Screen:
        
    
    Game Screen:
        
    



</summary>
		<content type="html">&lt;h4&gt;Description&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;
Implemented the Jewel Game described in &#39;HTML5 Games&#39; by &lt;a href=&quot;http://blog.nihilogic.dk/&quot;&gt;Jacob Seidelin&lt;/a&gt;. Offers basic gameplay with scores, levels, animations and menu implemented in JS, HTML5 Canvas and CSS.
&lt;/p&gt;

&lt;h4&gt;Live Game&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;
&lt;p&gt;
 &lt;a class=&quot;btn btn-primary&quot; type=&quot;button&quot; href=&quot;/images/assets/projects/jewel_switching/index.html&quot;&gt;Try it out!&lt;/a&gt; (not optimized for mobile yet)
&lt;p&gt;

&lt;h4&gt;Screenshots&lt;/h4&gt;
&lt;div class=&quot;hline&quot;&gt;&lt;/div&gt;

&lt;p&gt;
    &lt;div class=&quot;text-center&quot;&gt;Start Screen:
        &lt;img class=&quot;center-block img-responsive&quot; src=&quot;/images/assets/projects/jewel_switching/images/jewelgame_1.png&quot; alt=&quot;timer screen with picker to choose the amount of time we are setting it up for.&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;text-center&quot;&gt;Game Screen:
        &lt;img class=&quot;center-block img-responsive&quot; src=&quot;/images/assets/projects/jewel_switching/images/jewelgame_0.png&quot; alt=&quot;timer screen while the counter is active&quot;&gt;
    &lt;/div&gt;
&lt;/p&gt;
</content>
	</entry>

	<entry>
		<title type="text">Hello Blog World</title>
		<link href="http://connyrehbein.com/blog/2014/hello-world/" />
		<id>http://connyrehbein.com/blog/2014/hello-world/</id>
		<published>2014-02-11T00:00:00+01:00</published>
		<updated>2014-02-11T00:00:00+01:00</updated>
		<summary type="html">Finally got around to start a blog. A few days ago, I realized that I had dodged this topic long enough and forayed into web-development

</summary>
		<content type="html">&lt;p&gt;Finally got around to start a blog. A few days ago, I realized that I had dodged this topic long enough and forayed into web-development
&lt;!-- more --&gt;&lt;/p&gt;

&lt;p&gt;The goal? 
Create a web blog to share my work and thoughts. &lt;/p&gt;

&lt;p&gt;Until now, I’ve often worked on projects with already existing webservice systems. Creating everything from scratch, from domain management to webhosting to front-end design, was wonderful new challenge for me.&lt;/p&gt;

&lt;p&gt;For the frontend, I tried &lt;em&gt;Wordpress&lt;/em&gt; at first, but quickly realized that &lt;strong&gt;Bootstrap 3&lt;/strong&gt; and &lt;strong&gt;Jekyll&lt;/strong&gt; were much better suited for my purposes and easier to configure as well. All of it was a good learning experience, though.&lt;/p&gt;

&lt;p&gt;Now that everything is setup and running, what’s next?&lt;/p&gt;

&lt;p&gt;My &lt;strong&gt;long term goal&lt;/strong&gt; is to implement the project ideas collected by &lt;a href=&quot;http://www.coderslexicon.com/downloads/the-programmers-idea-book/&quot;&gt;Martyr2 in the programmers idea book&lt;/a&gt;. The language I currently plan to use for this is &lt;em&gt;Objective-C&lt;/em&gt; in combination with &lt;em&gt;iOS&lt;/em&gt;. Why choose that? I feel comfortable with objective-C and the iOS framework provides an easy way to implement fast user interfaces.&lt;/p&gt;

&lt;p&gt;With this, I hope to get more experience on projects from various genres, and also gain more skills in &lt;em&gt;iOS programming&lt;/em&gt;. 
By working through the (quite long) project list, I hope that at the end I will have a better grasp on some basic programming concepts, which might be a bit rusted now.&lt;/p&gt;

</content>
	</entry>

</feed>